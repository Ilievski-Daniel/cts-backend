name: CI/CD Pipeline

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  testing:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run linter
        run: |
          pylint main.py

      - name: Run tests
        run: python -m unittest test_main.py

  deploy:
    needs: testing
    runs-on: ubuntu-latest

    if: ${{ github.ref == 'refs/heads/main' && needs.testing.result == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install kubectl /usr/local/bin/

      - name: Configure Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ vars.GCP_PROJECT_ID }}
          default_region: ${{ vars.GCP_REGION }}
          default_zone: ${{ vars.GCP_ZONE }}

      - name: Configure Google Cloud authentication
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        run: |
          echo "$GCP_SA_KEY" > /tmp/gcp_sa_key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp_sa_key.json
          export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp_sa_key.json

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials ${{ vars.GKE_CLUSTER_NAME }} --zone ${{ vars.GCP_ZONE }} --project ${{ vars.GCP_PROJECT_ID }}

      - name: Check if deployment exists
        id: check_deployment
        run: |
          if kubectl get deployment cts-backend; then
            echo "::set-output name=deployment_exists::true"
          else
            echo "::set-output name=deployment_exists::false"
          fi

      - name: Delete deployment if exists
        if: steps.check_deployment.outputs.deployment_exists == 'true'
        run: |
          kubectl delete deployment cts-backend

      - name: Check if service exists
        id: check_service
        run: |
          if kubectl get service cts-backend; then
            echo "::set-output name=service_exists::true"
          else
            echo "::set-output name=service_exists::false"
          fi

      - name: Delete service if exists
        if: steps.check_service.outputs.service_exists == 'true'
        run: |
          kubectl delete service cts-backend

      - name: Build Docker image
        run: |
          docker build -t ${{ vars.DOCKER_REPO }} .

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_REPO }}:${{ github.run_number }}

      - name: Deploy to GKE with pod autoscaling
        run: |
          kubectl create deployment cts-backend --image=${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_REPO }}:${{ github.run_number }} --replicas=${{ vars.DEPLOYMENT_REPLICAS }}
          kubectl expose deployment cts-backend --type=LoadBalancer --port=${{ vars.SERVICE_PORT }} --target-port=${{ vars.CONTAINER_PORT }}
          kubectl set resources deployment cts-backend --requests=cpu=${{ vars.REQUESTS_CPU }},memory=${{ vars.REQUESTS_MEMORY }} --limits=cpu=${{ vars.LIMITS_CPU }},memory=${{ vars.LIMITS_MEMORY }}
          kubectl autoscale deployment cts-backend --cpu-percent=${{ vars.SCALE_CPU_PERCENT }} --min=${{ vars.SCALE_MIN }} --max=${{ vars.SCALE_MAX }}